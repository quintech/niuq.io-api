<?php

namespace App\Http\Controllers\Api\Account;

use App\Http\Controllers\Controller;
use App\Http\Requests\System\CreateAccountRequest;
use App\Http\Requests\UserRegisterRequest;
use App\Models\Account;
use App\Models\User;
use App\Services\Api\Account\CreateAccountService;
use App\Services\Api\Account\EditAccountDataService;
use App\Services\Api\Account\GetAccountDataService;
use Exception;
use Hash;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Date;

class AccountController extends Controller
{
    private $createAccount;
    private $getAccountDataService;
    private $editAccountDataService;

    public function __construct(
        CreateAccountService $createAccountService,
        GetAccountDataService $getAccountDataService,
        EditAccountDataService $editAccountDataService
    ) {
        $this->createAccount = $createAccountService;
        $this->getAccountDataService = $getAccountDataService;
        $this->editAccountDataService = $editAccountDataService;
    }

    /**
     * login
     */
    public function login(Request $request)
    {
        $credentials = request(['account', 'password']);

        if (!$token = auth('api')->attempt($credentials)) {
            return response()->json(['success' => false, 'message' => 'Incorrect account or password'], 401);
        }

        return $this->respondWithToken($token);
    }

    /**
     * Get the token array structure.
     *
     * @param  string $token
     *
     * @return \Illuminate\Http\JsonResponse
     */
    protected function respondWithToken($token)
    {
        return response()->json([
            'success' => true,
            'access_token' => $token,
            'token_type' => 'bearer',

            'userAccessToken' => '',
            'userGoogleID' => '',
            'userImg' => '/images/niuq_logo.svg?a37cc5acfdb13394b64ee46587a34654',
            'userEmail' => auth('api')->user()->email,
            'userName' => auth('api')->user()->account,
            // To match the timestamp generated by the frontend JavaScript, adjustments can be made after removing the timestamp check.
            'useTime' => Date::now()->getPreciseTimestamp(3) + 7200000,

            'expires_in' => Date::now()->getPreciseTimestamp(3) + 7200000
        ]);
    }

    /**
     * register
     */
    public function register(UserRegisterRequest $request)
    {
        try {
            User::create([
                'account' => $request['account'],
                'password' => Hash::make($request['password'])
            ]);
            return response()->json(['success' => true, 'message' => trans('web.api.account.register.success')]);
        } catch (Exception $e) {
            return response()->json(['success' => false, 'message' => $e->getMessage()]);
        }
    }

    public function getUser()
    {
        $user = auth('api')->user();
        if ($user) {
            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => [
                    'account' => $user['account'],
                    'owner_name' => $user['owner_name'],
                    'email' => $user['email']
                ]
            ]);
        } else {
            return response()->json(['status' => 401, 'message' => 'Not logged in'], 401);
        };
    }

    /**
    * Add Google account
     * @param  CreateAccountRequest  $request
     * @return JsonResponse
     */
    public function storeGoogleAccount(CreateAccountRequest $request): JsonResponse
    {
        return $this->createAccount->createGoogleAccount($request);
    }

    /**
    * Get user data
     * @param  Request  $request
     * @return JsonResponse
     */
    public function getGoogleAccountData(Request $request): JsonResponse
    {
        return $this->getAccountDataService->getGoogleAccountData($request);
    }

    /**
    * Edit user data
     * @param  Request  $request
     * @return JsonResponse
     */
    public function userEditProfile(Request  $request): JsonResponse
    {
        return $this->editAccountDataService->userEditProfile($request);
    }
}
